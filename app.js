// Main App Initialization
document.addEventListener('DOMContentLoaded', () => {
  console.log('ParkHere: App initializing...');

  // ‚úÖ Get all DOM elements after HTML loads
  const saveBtn = document.getElementById('saveBtn');
  const findBtn = document.getElementById('findBtn');
  const shareBtn = document.getElementById('shareBtn');
  const showQRBtn = document.getElementById('showQRBtn');
  const directionsBtn = document.getElementById('directionsBtn');
  const nearbyBtn = document.getElementById('nearbyBtn');
  const status = document.getElementById('status');
  const mapDiv = document.getElementById('map');
  const themeToggle = document.getElementById('themeToggle');
  const resetBtn = document.getElementById('resetBtn');
  const supportBtn = document.getElementById('supportBtn');
  const timer = document.getElementById('timer');
  const photoInput = document.getElementById('photoInput');
  const photoImg = document.getElementById('photoImg');
  const photoPreview = document.getElementById('photoPreview');
  const voiceSelect = document.getElementById('voiceSelect');
  const testVoiceBtn = document.getElementById('testVoiceBtn');
  const whatsappNumber = document.getElementById('whatsappNumber');
  const sendWABtn = document.getElementById('sendWABtn');
  const nearbyContainer = document.getElementById('nearbyContainer');
  const qrContainer = document.getElementById('qrContainer'); // ‚úÖ Added

  // ‚úÖ Safe gtag wrapper
  function trackEvent(action, category = 'Feature', label = '') {
    if (typeof gtag === 'function') {
      gtag('event', action, { 'event_category': category, 'event_label': label });
    }
  }

  // üó∫Ô∏è Initialize Leaflet map
  let leafletMap;

  function updateMap(lat, lng) {
    if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {
      console.warn('Invalid coordinates in updateMap:', { lat, lng });
      return;
    }
    mapDiv.style.display = 'block';
    if (!leafletMap) {
      leafletMap = L.map('map').setView([lat, lng], 18);
      L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: '¬© <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
      }).addTo(leafletMap);
    } else {
      leafletMap.setView([lat, lng], 18);
    }
    if (leafletMap._marker) leafletMap.removeLayer(leafletMap._marker);
    leafletMap._marker = L.marker([lat, lng]).addTo(leafletMap);

  }

  // üîç Reverse Geocode
  async function reverseGeocode(lat, lng) {
    if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {
      return 'Unknown Location';
    }
    try {
      const response = await fetch(`https://photon.komoot.io/reverse?lat=${lat}&lon=${lng}`);
      const data = await response.json();
      return data.features?.[0]?.properties?.name || `Parking Spot at ${lat.toFixed(5)}, ${lng.toFixed(5)}`;
    } catch (err) {
      console.warn('Reverse geocode failed:', err);
      return `Parking Spot at ${lat.toFixed(5)}, ${lng.toFixed(5)}`;
    }
  }

  // ‚úÖ Distance helper
  function computeDistance(lat1, lon1, lat2, lon2) {
    const R = 6371e3;
    const œÜ1 = lat1 * Math.PI / 180;
    const œÜ2 = lat2 * Math.PI / 180;
    const ŒîœÜ = (lat2 - lat1) * Math.PI / 180;
    const ŒîŒª = (lon2 - lon1) * Math.PI / 180;
    const a = Math.sin(ŒîœÜ/2)**2 + Math.cos(œÜ1)*Math.cos(œÜ2)*Math.sin(ŒîŒª/2)**2;
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
    return Math.round(R * c);
  }

  
// üîç Find Nearby Places
async function searchNearbyPhoton(lat, lng) {
  if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) return {};

  const delta = 0.03;
  const west = lng - delta;
  const south = lat - delta;
  const east = lng + delta;
  const north = lat + delta;

  const typeMap = [
    { 
      type: 'shopping_mall', 
      term: 'mall', 
      filter: (place) => {
        const name = place.name?.toLowerCase() || '';
        const displayName = place.display_name?.toLowerCase() || '';
        return name.includes('mall') || 
               name.includes('shopping centre') || 
               name.includes('shopping center') ||
               displayName.includes('mall') || 
               displayName.includes('shopping centre') || 
               displayName.includes('shopping center');
      }
    },
    { type: 'park', term: 'park', filter: (p) => (p.class === 'leisure' && p.type === 'park') || (p.name && p.name.toLowerCase().includes('park')) },
    { type: 'supermarket', term: 'supermarket', filter: (p) => (p.class === 'shop' && p.type === 'supermarket') || (p.name && p.name.toLowerCase().includes('supermarket')) },
    { type: 'restaurant', term: 'restaurant', filter: (p) => (p.class === 'amenity' && p.type === 'restaurant') || (p.name && p.name.toLowerCase().includes('restaurant')) },
    { type: 'cafe', term: 'cafe', filter: (p) => (p.class === 'amenity' && p.type === 'cafe') || (p.name && p.name.toLowerCase().includes('cafe')) },
    { type: 'fuel', term: 'fuel', filter: (p) => (p.class === 'amenity' && p.type === 'fuel') || (p.name && p.name.toLowerCase().includes('fuel')) }
  ];

  const results = {};

  // ‚úÖ Search for all types except parking
  for (const item of typeMap) {
    const { type, term, filter } = item;
    const url = `https://nominatim.openstreetmap.org/search.php?q=${encodeURIComponent(term)}&format=json&viewbox=${west},${south},${east},${north}&bounded=1&limit=10`;
    try {
      const response = await fetch(url, {
        headers: { 'User-Agent': 'ParkHere/1.0 (https://parking-pwa-eight.vercel.app; jason@digitalchaos.com.sg)' }
      });
      const data = await response.json();
      results[type] = data
        .filter(filter)
        .map(place => ({
          geometry: { coordinates: [parseFloat(place.lon), parseFloat(place.lat)] },
          raw: place,
          properties: { name: place.name || 'Unnamed' }
        }));
    } catch (err) {
      console.warn(`Search failed for ${type}:`, err);
      results[type] = [];
    }
  }

  // ‚úÖ Special case: Car Parks ‚Äî use direct OSM tag search
  try {
    const url = `https://nominatim.openstreetmap.org/search?amenity=parking&format=json&viewbox=${west},${south},${east},${north}&bounded=1&limit=5`;
    const response = await fetch(url, {
      headers: { 'User-Agent': 'ParkHere/1.0 (https://parking-pwa-eight.vercel.app; jason@digitalchaos.com.sg)' }
    });
    const data = await response.json();

    results.parking = data.map(place => ({
      geometry: {
        coordinates: [parseFloat(place.lon), parseFloat(place.lat)]
      },
      raw: place,
      properties: {
        name: place.name || 'Car Park'
      }
    }));
  } catch (err) {
    console.warn('Search failed for parking:', err);
    results.parking = [];
  }

  // ‚úÖ Special case: Shopping Malls ‚Äî use q=mall
  try {
    const url = `https://nominatim.openstreetmap.org/search.php?q=mall&format=json&viewbox=${west},${south},${east},${north}&bounded=1&limit=10`;
    const response = await fetch(url, {
      headers: { 'User-Agent': 'ParkHere/1.0 (https://parking-pwa-eight.vercel.app; jason@digitalchaos.com.sg)' }
    });
    const data = await response.json();

    results.shopping_mall = data.map(place => ({
      geometry: {
        coordinates: [parseFloat(place.lon), parseFloat(place.lat)]
      },
      raw: place,
      properties: {
        name: place.name || 'Unnamed'
      }
    }));

    console.log('‚úÖ Final mall results:', results.shopping_mall);
  } catch (err) {
    console.warn('Search failed for shopping_mall:', err);
    results.shopping_mall = [];
  }

  return results;
}
  


// ‚úÖ Display Nearby Results - Show 6 Nearest Per Type
function displayNearbyResults(results, spot) {

    // ‚úÖ LOG 5: Results received by display function
    console.log('üì• Results received by displayNearbyResults:', results);

  let html = '';

  const labels = {
    restaurant: 'üçΩÔ∏è Restaurants',
    cafe: '‚òï Cafes',
    supermarket: 'üõí Supermarkets',
    shopping_mall: 'üõçÔ∏è Shopping Malls',
    park: 'üå≥ Parks',
    parking: 'üÖøÔ∏è Carparks',
    fuel: '‚õΩ Gas Stations'
  };

  for (const [type, places] of Object.entries(results)) {
    if (!places.length) continue;
    const label = labels[type];
    if (!label) continue;

      // ‚úÖ LOG 6: Processing this type
      console.log(`üìä Processing ${type}:`, places);

    // ‚úÖ Sort places by distance (nearest first)
    const sortedPlaces = places
      .map(place => {
        const dist = computeDistance(
          spot.lat,
          spot.lng,
          place.geometry.coordinates[1],
          place.geometry.coordinates[0]
        );
        return { ...place, distance: dist };
      })
      .sort((a, b) => a.distance - b.distance)
      .slice(0, 6); // ‚úÖ Take only the 6 nearest

    html += `<h3 style="margin:15px 0 8px 0; color:#2c7be5;">${label}</h3>`;
    sortedPlaces.forEach(place => {
      const distText = place.distance >= 1000 
        ? (place.distance / 1000).toFixed(1) + ' km' 
        : place.distance + ' m';
      const name = place.properties.name;
      const address = getPlaceAddress(place.raw) || 'Nearby';
      const [lng, lat] = place.geometry.coordinates;
      const mapUrl = `https://www.google.com/maps/dir/?api=1&destination=${lat},${lng}`;

      html += `<div class="nearby-place">
        <h4>
          <a href="${mapUrl}" target="_blank">${name}</a>
        </h4>
        <p>üìç ${distText} away</p>
        <p><small>${address}</small></p>
      </div>`;
    });
  }

  nearbyContainer.innerHTML = html || '<p>üì≠ No nearby places found.</p>';
}

  function getPlaceAddress(place) {
    if (!place || !place.display_name) return 'Nearby';
    const parts = place.display_name.split(',');
    return parts
      .map(p => p.trim())
      .filter(p => p && !['Singapore', 'SG', 'Central', 'Ang Mo Kio'].includes(p) && !/^\d{6}$/.test(p) && !/^\d+$/.test(p) && !p.includes('.'))
      .slice(-2)
      .join(', ') || 'Nearby';
  }

  // üîî Request notification permission
  function requestNotificationPermission() {
    if ('Notification' in window && Notification.permission !== 'granted') {
      Notification.requestPermission();
    }
  }

function hideAds() {
  const adContainer = document.getElementById('ad-container');
  adContainer.classList.add('ad-hidden');
}

// ‚úÖ Load Ads with full policy compliance
let adLoaded = false; // Prevents duplicate pushes

function loadAds() {
  console.log('Attempting to load ads...');
  const adContainer = document.getElementById('ad-container');
  
  if (!adContainer) {
    console.warn('Ad container not found in DOM');
    return;
  }

  // Check if meaningful content is present
  const hasContent = Boolean(
    document.querySelector('.map') || 
    document.querySelector('.nearby-place') || 
    document.querySelector('.photo-preview') || 
    document.querySelector('.voice-select') ||
    JSON.parse(localStorage.getItem('parkingSpot'))
  );

  if (!hasContent) {
    console.warn('No meaningful content detected; ads not loaded.');
    adContainer.classList.add('ad-hidden');
    return;
  }

  console.log('Meaningful content detected, preparing to load ad...');
  adContainer.classList.remove('ad-hidden');

  // Only push once
  if (adLoaded) {
    console.log('Ad already loaded, skipping push');
    return;
  }

  // Delay to ensure DOM is fully rendered
  setTimeout(() => {
    try {
      console.log('Executing adsbygoogle.push()');
      (adsbygoogle = window.adsbygoogle || []).push({});
      adLoaded = true;
      console.log('Ad request sent successfully');
    } catch (err) {
      console.warn('AdSense push failed:', err);
    }
  }, 300);
}


// ‚úÖ Reset ad state on navigation or reload
function resetAds() {
  adLoaded = false;
  const adContainer = document.getElementById('ad-container');
  if (adContainer) {
    adContainer.classList.add('ad-hidden');
    console.log('Ad hidden successfully');
  }
}


  // üåô Theme Toggle
  let isDark = localStorage.getItem('darkMode') === 'true';
  if (isDark) document.body.classList.add('dark');
  if (themeToggle) {
    themeToggle.textContent = isDark ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode';
    themeToggle.addEventListener('click', () => {
      isDark = !isDark;
      document.body.classList.toggle('dark', isDark);
      themeToggle.textContent = isDark ? '‚òÄÔ∏è Light Mode' : 'üåô Dark Mode';
      localStorage.setItem('darkMode', isDark);
      trackEvent('toggle', 'UI', isDark ? 'Dark Mode' : 'Light Mode');
    });
  }

  // üì∏ Photo Upload
  if (photoInput) {
    photoInput.addEventListener('change', (e) => {
      const file = e.target.files[0];
      if (file) {
        const reader = new FileReader();
        reader.onload = function(event) {
          const dataUrl = event.target.result;
          photoImg.src = dataUrl;
          photoPreview.style.display = 'block';
          localStorage.setItem('parkingPhoto', dataUrl);
        };
        reader.readAsDataURL(file);
      }
    });
  }

  // ‚úÖ Save My Parking Spot
  if (saveBtn) {
    saveBtn.addEventListener('click', () => {
      status.textContent = 'üìç Getting your location...';
      navigator.geolocation.getCurrentPosition(async (position) => {
        const lat = position.coords.latitude;
        const lng = position.coords.longitude;

        if (lat == null || lng == null || isNaN(lat) || isNaN(lng)) {
          status.textContent = '‚ùå Invalid location received';
          return;
        }

        // ‚úÖ Reverse geocode to get location name
        const locationName = await reverseGeocode(lat, lng);

        // ‚úÖ Save spot
        const spot = {
          lat,
          lng,
          time: new Date().toISOString(),
          locationName
        };
        localStorage.setItem('parkingSpot', JSON.stringify(spot));

        // ‚úÖ Save photo separately (as Data URL)
        if (photoImg.src) {
          localStorage.setItem('parkingPhoto', photoImg.src);
        }

        // ‚úÖ Clear nearby results
        nearbyContainer.innerHTML = '';
        nearbyContainer.style.display = 'none';

        // ‚úÖ Update UI
        updateMap(lat, lng);
        findBtn.disabled = false;
        shareBtn.disabled = false;
        showQRBtn.disabled = false;
        directionsBtn.disabled = false;
        nearbyBtn.disabled = false;
        resetBtn.disabled = false;
        sendWABtn.disabled = false;

        status.textContent = `‚úÖ Parking saved: ${locationName}`;
        if (timer) timer.textContent = '';
        trackEvent('click', 'Action', 'Save Parking Spot');

      // ‚úÖ ‚úÖ ‚úÖ CRITICAL FIX: Load ads immediately after saving
      loadAds();

      }, (err) => {
        status.textContent = `‚ùå Error: ${err.message}`;
      }, { enableHighAccuracy: true });
    });
  }

  // üß≠ Find My Car
  if (findBtn) {
    findBtn.addEventListener('click', () => {
      const spot = JSON.parse(localStorage.getItem('parkingSpot'));
      if (!spot) {
        status.textContent = '‚ùå No parking spot saved.';
        return;
      }
      trackEvent('click', 'Feature', 'Find My Car');
      speechSynthesis.cancel();
      updateMap(spot.lat, spot.lng);
      const parkedTime = new Date(spot.time);
      const now = new Date();
      const diffMs = now - parkedTime;
      const hours = Math.floor(diffMs / (1000 * 60 * 60));
      const minutes = Math.floor((diffMs % (1000 * 60 * 60)) / (1000 * 60));
      const time = parkedTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });
      let durationText = hours === 0 ? `${minutes} minute${minutes !== 1 ? 's' : ''}` : `${hours} hour${hours !== 1 ? 's' : ''}${minutes > 0 ? ` and ${minutes} minute${minutes !== 1 ? 's' : ''}` : ''}`;
      const isMeaningfulLocation = spot.locationName && !spot.locationName.startsWith('Parking Spot at') && !spot.locationName.includes('Unknown');
      const baseMessage = `You parked at ${time}${isMeaningfulLocation ? ` near ${spot.locationName}` : ''} for ${durationText}.`;
      const utter = new SpeechSynthesisUtterance(baseMessage);
      utter.voice = window.getSelectedVoice ? window.getSelectedVoice() : null;
      utter.rate = 0.9;
      utter.pitch = 1;
      speechSynthesis.speak(utter);
      status.textContent = `üöó Parked for ${hours ? hours + 'h ' : ''}${minutes}m.`;
      navigator.geolocation.getCurrentPosition((pos) => {
        const distance = computeDistance(pos.coords.latitude, pos.coords.longitude, spot.lat, spot.lng);
        setTimeout(() => {
          const distUtter = new SpeechSynthesisUtterance(`Your car is ${distance} meters away.`);
          distUtter.voice = window.getSelectedVoice ? window.getSelectedVoice() : null;
          distUtter.rate = 0.8;
          speechSynthesis.speak(distUtter);
        }, 2000);
        status.textContent = `üöó Your car is ${distance} meters away.`;
      }, (err) => {
        console.warn('Failed to get current location for distance:', err);
        status.textContent = 'üìç Unable to get your location for distance.';
      }, { enableHighAccuracy: true, timeout: 10000 });
    });
  }

  // üì§ Share My Spot
  if (shareBtn) {
    shareBtn.addEventListener('click', async () => {
      const spot = JSON.parse(localStorage.getItem('parkingSpot'));
      if (!spot) return;
      const url = `${window.location.origin}/?lat=${spot.lat}&lng=${spot.lng}&time=${spot.time}`;
      const shareData = { 
        title: 'My Parking Spot', 
        text: `I parked at ${spot.locationName}`, 
        url 
      };
      if (navigator.share) {
        try {
          await navigator.share(shareData);
          trackEvent('share', 'Feature', 'Web Share API');
        } catch (err) {
          console.log('Share cancelled:', err);
          navigator.clipboard.writeText(url).then(() => {
            status.textContent = 'üîó Link copied to clipboard!';
            trackEvent('click', 'Feature', 'Copy Share Link');
          });
        }
      } else {
        navigator.clipboard.writeText(url).then(() => {
          status.textContent = 'üîó Link copied to clipboard!';
          trackEvent('click', 'Feature', 'Copy Share Link');
        });
      }
    });
  }

  // üî≤ Show QR Code
  if (showQRBtn && typeof QRCode !== 'undefined' && qrContainer) {
    showQRBtn.addEventListener('click', () => {
      const spot = JSON.parse(localStorage.getItem('parkingSpot'));
      if (!spot) return;
      const url = `${window.location.origin}/?lat=${spot.lat}&lng=${spot.lng}&time=${spot.time}`;
      const qrcodeDiv = document.getElementById('qrcode');
      qrcodeDiv.innerHTML = ''; // Clear previous QR
      new QRCode(qrcodeDiv, {
        text: url,
        width: 128,
        height: 128
      });
      qrContainer.style.display = 'block';
      trackEvent('click', 'Feature', 'Show QR Code');
    });
  }

  // üó∫Ô∏è Get Directions
  if (directionsBtn) {
    directionsBtn.addEventListener('click', () => {
      const spot = JSON.parse(localStorage.getItem('parkingSpot'));
      if (!spot) return;
      const url = `https://www.google.com/maps/dir/?api=1&destination=${spot.lat},${spot.lng}`;
      window.open(url, '_blank');
      trackEvent('click', 'Feature', 'Get Directions');
    });
  }

  // üîç Nearby Places Button
  if (nearbyBtn) {
    nearbyBtn.addEventListener('click', async () => {
      const spot = JSON.parse(localStorage.getItem('parkingSpot'));
      if (!spot) return;
      trackEvent('click', 'Feature', 'Nearby Places');
      nearbyContainer.innerHTML = '<p>üîç Searching for nearby places...</p>';
      nearbyContainer.style.display = 'block';
      try {
        const results = await searchNearbyPhoton(spot.lat, spot.lng);
        
        // ‚úÖ LOG 7: Results before display
        console.log('üéØ Final results before display:', results);

        displayNearbyResults(results, spot);
      } catch (err) {
        console.error('Nearby search failed:', err);
        nearbyContainer.innerHTML = `<p>‚ùå Failed: ${err.message}</p>`;
      }
    });
  }

  // üí¨ Save Reminder in WhatsApp
  if (sendWABtn) {
    sendWABtn.addEventListener('click', () => {
      const spot = JSON.parse(localStorage.getItem('parkingSpot'));
      if (!spot || !whatsappNumber.value) return;
      const photo = localStorage.getItem('parkingPhoto') || '';
      const url = `${window.location.origin}/?lat=${spot.lat}&lng=${spot.lng}&time=${spot.time}&photo=${encodeURIComponent(photo)}`;
      const text = encodeURIComponent(`I parked at ${spot.locationName}. Here's the location: ${url}`);
      const waUrl = `https://wa.me/${whatsappNumber.value}?text=${text}`;
      window.open(waUrl, '_blank');
      trackEvent('click', 'Feature', 'Send to WhatsApp');
    });
  }

  // ‚òï Support This App
  if (supportBtn) {
    supportBtn.addEventListener('click', () => {
      window.open('https://buymeacoffee.com/digitalchaos', '_blank');
      trackEvent('click', 'CTA', 'Support App');
    });
  }

  // üóëÔ∏è Reset Parking Spot
  if (resetBtn) {
    resetBtn.addEventListener('click', () => {
      localStorage.removeItem('parkingSpot');
      localStorage.removeItem('parkingPhoto');
      if (leafletMap) { leafletMap.remove(); leafletMap = null; }
      mapDiv.style.display = 'none';
      [findBtn, shareBtn, showQRBtn, directionsBtn, nearbyBtn, resetBtn, sendWABtn].forEach(btn => btn.disabled = true);
      status.textContent = '‚úÖ Parking spot reset.';
      if (timer) timer.textContent = '';
      photoPreview.style.display = 'none';
      document.getElementById('qrContainer').style.display = 'none';
      nearbyContainer.style.display = 'none';
      trackEvent('click', 'Action', 'Reset Parking Spot');

    // ‚úÖ Hide ads and allow reload
  resetAds();
    // ‚úÖ ‚úÖ ‚úÖ CRITICAL FIX: Load ads immediately after reset (if you want to show ads on empty state)
    // Note: Usually you don't load ads here, but if you have a "featured" ad, you might.
    // For now, we skip loadAds() here.

    });
  }

  // Hide tips if previously dismissed
if (localStorage.getItem('parkingTipsDismissed') === 'true') {
  const tips = document.getElementById('parking-tips');
  if (tips) tips.style.display = 'none';
}

// Toggle visibility of content and placeholder
const toggleParkingTips = () => {
  const content = document.getElementById('parking-tips-content');
  const placeholder = document.getElementById('parking-tips-placeholder');
  const isMinimized = content.style.display === 'none';

  content.style.display = isMinimized ? 'block' : 'none';
  placeholder.style.display = isMinimized ? 'none' : 'block';
  localStorage.setItem('parkingTipsMinimized', !isMinimized);
};

// Attach to button
// document.querySelector('#parking-tips button').addEventListener('click', toggleParkingTips);

  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // Shared View Logic
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  const params = new URLSearchParams(window.location.search);
  if (params.has('lat') && params.has('lng')) {
    document.querySelectorAll('.shared-hide').forEach(el => el.style.display = 'none');
    const lat = parseFloat(params.get('lat'));
    const lng = parseFloat(params.get('lng'));
    updateMap(lat, lng);
    const backButton = document.createElement('button');
    backButton.textContent = 'üîô Back to My Parking';
    backButton.addEventListener('click', () => {
      console.log('Back to My Parking clicked');
      window.location.href = './';
    });
    document.querySelector('.container').appendChild(backButton);
    return;
  }

  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  // Normal App Logic (Owner View)
  // ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî
  requestNotificationPermission();
  const savedSpot = localStorage.getItem('parkingSpot');
  if (savedSpot) {
    const spot = JSON.parse(savedSpot);
    updateMap(spot.lat, spot.lng);
    status.textContent = `üìç Parking spot restored: ${spot.locationName}`;
    findBtn.disabled = false;
    shareBtn.disabled = false;
    showQRBtn.disabled = false;
    directionsBtn.disabled = false;
    nearbyBtn.disabled = false;
    resetBtn.disabled = false;
    sendWABtn.disabled = false;

    // ‚úÖ Restore photo
    const savedPhoto = localStorage.getItem('parkingPhoto');
    if (savedPhoto) {
      photoImg.src = savedPhoto;
      photoPreview.style.display = 'block';
    }


  // ‚úÖ ‚úÖ ‚úÖ CRITICAL FIX: Load ads immediately after restoring saved spot
  loadAds();
    } else {
  // Hide ads or prevent loading
  hideAds();
  }

  // üîä Voice Selection (Robust, iOS-Compatible)
  if ('speechSynthesis' in window && voiceSelect) {
    let voices = [];

    function populateVoiceList() {
      voices = speechSynthesis.getVoices();
      voiceSelect.innerHTML = '';
      const defaultOption = document.createElement('option');
      defaultOption.value = '';
      defaultOption.textContent = 'System Voice';
      voiceSelect.appendChild(defaultOption);

      voices.forEach((voice, i) => {
        const option = document.createElement('option');
        option.value = i;
        option.textContent = `${voice.name} (${voice.lang})`;
        voiceSelect.appendChild(option);
      });

      const savedIndex = localStorage.getItem('preferredVoice');
      if (savedIndex !== null && voices[savedIndex]) {
        voiceSelect.value = savedIndex;
      }
    }

    // ‚úÖ Test Voice Button
    if (testVoiceBtn) {
      testVoiceBtn.addEventListener('click', () => {
        const msg = new SpeechSynthesisUtterance('This is a voice test');
        const selectedVoice = window.getSelectedVoice();
        if (selectedVoice) msg.voice = selectedVoice;
        msg.rate = 0.9;
        msg.pitch = 1;
        speechSynthesis.speak(msg);
      });
    }

    // ‚úÖ Populate voices
    populateVoiceList();
    if (speechSynthesis.onvoiceschanged !== undefined) {
      speechSynthesis.onvoiceschanged = populateVoiceList;
    }

    // ‚úÖ Fallback: iOS and slow browsers
    setTimeout(populateVoiceList, 500);
    setTimeout(populateVoiceList, 1000);
    setTimeout(populateVoiceList, 2000);

    // ‚úÖ Save selection
    voiceSelect.addEventListener('change', () => {
      localStorage.setItem('preferredVoice', voiceSelect.value);
    });

    // ‚úÖ Expose for other functions
    window.getSelectedVoice = function() {
      const savedIndex = voiceSelect.value;
      if (savedIndex === '' || savedIndex === null) return null;
      return voices[savedIndex] || null;
    };
  } else if (voiceSelect) {
    // Hide voice controls if not supported
    voiceSelect.style.display = 'none';
    const label = document.querySelector('label[for="voiceSelect"]');
    if (label) label.style.display = 'none';
    if (testVoiceBtn) testVoiceBtn.style.display = 'none';
  }
});

// Random Parking Tip
const parkingTips = [
  "Did you know? In many cities, you must park within 12 inches of the curb.",
  "Always check for 'No Parking' signs with specific hours ‚Äî they can be easy to miss.",
  "Using a dashcam? Point it toward your parking spot for extra security.",
  "In cold climates, clear all snow from your car ‚Äî including the roof ‚Äî before driving.",
  "Never park over a storm drain ‚Äî it‚Äôs often a violation and can cause flooding.",
  "When parking on a hill, turn your wheels: left when facing downhill, right when uphill.",
  "Use your car‚Äôs sun visor to mark your parking spot if you‚Äôre in a large lot.",
  "Avoid parking under trees ‚Äî sap, bird droppings, or falling branches can damage your car.",
  "Always lock your car and hide valuables from view to deter theft.",
  "Check for fire hydrants ‚Äî parking too close can result in a fine or towing.",
  "In busy areas, note nearby landmarks or building numbers to help find your car.",
  "If parking in a garage, take a photo of the floor level and zone letter/number.",
  "Use your phone‚Äôs camera to take a panoramic shot of your surroundings when parking.",
  "Some cities require you to turn headlights off when parked ‚Äî check local rules.",
  "Be cautious of parking near construction zones ‚Äî scaffolding or equipment may block your exit.",
  "In narrow streets, leave enough space for other cars to open doors safely.",
  "If parking overnight, choose a well-lit area to increase safety.",
  "Double-check that your parking brake is engaged, especially on slopes.",
  "Avoid parking in areas with low-hanging branches ‚Äî they can scratch your roof or windows.",
  "In residential zones, be mindful of resident-only parking restrictions.",
  "Keep an emergency kit in your car ‚Äî especially useful if you‚Äôre parked far from help.",
  "Use a parking app or PWA like ParkHere to save your exact location with a photo.",
  "If parking at an airport, compare long-term vs. short-term rates ‚Äî sometimes shuttles are cheaper.",
  "In multi-level parking, use a reminder app to note your level and section.",
  "Be aware of street cleaning schedules ‚Äî parking during cleaning hours can lead to fines.",
  "When parking in a lot, try to park close to a corner or wall ‚Äî it reduces the chance of dings.",
  "If parking in the rain, leave a window slightly open to prevent fogging (if safe).",
  "In high-theft areas, consider using a steering wheel lock for added security.",
  "Always check for towing warnings ‚Äî some private lots tow without notice.",
  "Use your car‚Äôs built-in navigation to 'save location' if your phone battery is low."
];

// Display a random parking tip
if (document.getElementById('parking-tip')) {
  const randomIndex = Math.floor(Math.random() * parkingTips.length);
  document.getElementById('parking-tip').textContent = parkingTips[randomIndex];
}

// ‚úÖ Toggle Info Panel
const infoToggle = document.getElementById('infoToggle');
const infoPanel = document.getElementById('infoPanel');

if (infoToggle && infoPanel) {
  infoToggle.addEventListener('click', () => {
    const isHidden = infoPanel.style.display === 'none';
    infoPanel.style.display = isHidden ? 'block' : 'none';
    infoToggle.textContent = isHidden ? '‚ùå Hide & Tips' : '‚ÑπÔ∏è Info & Tips';
    trackEvent('click', 'UI', isHidden ? 'Expand Info Panel' : 'Collapse Info Panel');
  });
}

// Attach to button
document.querySelector('#infoToggle button').addEventListener('click', infoToggle);


// ‚úÖ ParkingTipsToggle ParkingTipsPanel
const ParkingTipsToggle = document.getElementById('ParkingTipsToggle');
const ParkingTipsPanel = document.getElementById('ParkingTipsPanel');

if (ParkingTipsToggle && ParkingTipsPanel) {
  ParkingTipsToggle.addEventListener('click', () => {
    const isHidden = ParkingTipsPanel.style.display === 'none';
    ParkingTipsPanel.style.display = isHidden ? 'block' : 'none';
    ParkingTipsToggle.textContent = isHidden ? '‚ùå Hide Parking Tips' : 'üöó Parking Tips';
    trackEvent('click', 'UI', isHidden ? 'Expand Parking Tips Panel' : 'Collapse Parking Tips Panel');
  });
}
// Attach to button
document.querySelector('#ParkingTipsToggle button').addEventListener('click', ParkingTipsToggle);
